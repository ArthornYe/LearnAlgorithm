package 灯泡开关.P319;

/**
 * 这个就比较容易去想了，看一个灯泡是否还亮着，只要它被开关了奇数次就好了，我们看一下灯泡的开关操作：
 *
 * 第 1 轮，每个灯泡都开关一次，也就是能整除 1 的都开关一次
 *
 * 第 2 轮，每两个灯泡开关一次，也就是能整除 2 的都开关一次
 *
 * ...
 *
 * 以此类推，第 i 轮操作的灯泡必须是能够整除 i 的
 *
 * 那么我们遍历一遍观察有哪些灯泡被操作了奇数次就好了。我们思考一下每个数字的因子：
 *
 * 比如普通数字 15：1 3 5 15，8：1 2 4 8
 *
 * 完全平方数 16：1 2 4 8 16
 *
 * 所以只有完全平方数能够满足被操作奇数次，其实很容易理解为什么非完全平方数字有偶数个因子
 *
 * 首先每个数字 num = 根号num*根号num，并且一定有因子 1 和 num
 * 因为根号num不为整数，那么其余因子肯定是小于根号num和大于根号num的组合，所以有偶数个。
 *
 * 最后问题演变为求 1~n 完全平方数的个数，1 * 1、2 * 2、...根号n * 根号n
 */
class Solution {
    public int bulbSwitch(int n) {
        return (int) Math.floor(Math.sqrt(n));
    }
}